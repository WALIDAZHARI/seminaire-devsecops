version: '3.8'

services:
  # Application Services
  user-service:
    build: ./services/user-service
    container_name: user-service
    ports:
      - "5555:5555"
    environment:
      - PORT=5555
    networks:
      - devsecops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build: ./services/product-service
    container_name: product-service
    ports:
      - "5556:5556"
    environment:
      - PORT=5556
      - USER_SERVICE_URL=http://user-service:5555
    networks:
      - devsecops-network
    depends_on:
      - user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5556/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CI/CD
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    privileged: true
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins/init.groovy:/var/jenkins_home/init.groovy.d/init.groovy
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    networks:
      - devsecops-network

  # Security Testing
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
    networks:
      - devsecops-network
    depends_on:
      - sonarqube-db

  sonarqube-db:
    image: postgres:13
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql/data
    networks:
      - devsecops-network

  # Trivy for container scanning
  trivy:
    image: aquasec/trivy:latest
    container_name: trivy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devsecops-network
    command: server --listen 0.0.0.0:8080
    ports:
      - "8081:8080"

  # Nuclei for DAST
  nuclei:
    image: projectdiscovery/nuclei:latest
    container_name: nuclei
    networks:
      - devsecops-network
    volumes:
      - ./security/nuclei:/nuclei-templates

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - devsecops-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - devsecops-network
    depends_on:
      - prometheus

  # Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    networks:
      - devsecops-network

networks:
  devsecops-network:
    driver: bridge

volumes:
  jenkins_home:
  sonarqube_db:
  prometheus_data:
  grafana_data:
