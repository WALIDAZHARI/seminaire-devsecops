pipeline {
    agent any
    
    environment {
        // Using Docker Hub registry
        DOCKER_REGISTRY = "docker.io/walidazhari"
        // Alternatively for GitHub Container Registry:
        // DOCKER_REGISTRY = "ghcr.io/walidazhari"
        
        USER_SERVICE_IMAGE = "${DOCKER_REGISTRY}/user-service:${BUILD_NUMBER}"
        PRODUCT_SERVICE_IMAGE = "${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER}"
        
        // Add credentials ID for Docker registry
        DOCKER_CREDENTIALS_ID = 'docker-credentials'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            parallel {
                stage('Build User Service') {
                    steps {
                        dir('services/user-service') {
                            sh 'docker build -t ${USER_SERVICE_IMAGE} .'
                        }
                    }
                }
                stage('Build Product Service') {
                    steps {
                        dir('services/product-service') {
                            sh 'docker build -t ${PRODUCT_SERVICE_IMAGE} .'
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Test User Service') {
                    steps {
                        dir('services/user-service') {
                            sh 'pip install -r requirements.txt'
                            sh 'pytest test_app.py --cov=app'
                        }
                    }
                }
                stage('Test Product Service') {
                    steps {
                        dir('services/product-service') {
                            sh 'pip install -r requirements.txt'
                            sh 'pytest test_app.py --cov=app'
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh 'sonar-scanner -Dsonar.projectKey=devsecops-demo -Dsonar.sources=.'
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
                }
                stage('Trivy Scan') {
                    steps {
                        sh "trivy image ${USER_SERVICE_IMAGE} --format json --output user-service-trivy.json"
                        sh "trivy image ${PRODUCT_SERVICE_IMAGE} --format json --output product-service-trivy.json"
                    }
                }
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    sh "docker push ${USER_SERVICE_IMAGE}"
                    sh "docker push ${PRODUCT_SERVICE_IMAGE}"
                    sh "docker logout"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes-config']) {
                    // Create a temporary copy of the manifests to avoid modifying the git-tracked files
                    sh "mkdir -p kubernetes/temp"
                    sh "cp kubernetes/manifests/* kubernetes/temp/"
                    
                    // Update the image references in the temporary files
                    sh "sed -i 's|{{USER_SERVICE_IMAGE}}|${USER_SERVICE_IMAGE}|g' kubernetes/temp/user-service-deployment.yaml"
                    sh "sed -i 's|{{PRODUCT_SERVICE_IMAGE}}|${PRODUCT_SERVICE_IMAGE}|g' kubernetes/temp/product-service-deployment.yaml"
                    
                    // Apply the Kubernetes manifests
                    sh "kubectl apply -f kubernetes/temp/namespace.yaml"
                    sh "kubectl apply -f kubernetes/temp/ -n devsecops"
                    
                    // Clean up temporary files
                    sh "rm -rf kubernetes/temp"
                }
            }
        }
        
        stage('DAST with Nuclei') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes-config']) {
                    // Wait for services to be ready
                    sh "kubectl wait --for=condition=available deployment/user-service -n devsecops --timeout=300s"
                    sh "kubectl wait --for=condition=available deployment/product-service -n devsecops --timeout=300s"
                    
                    // Get service URLs
                    script {
                        def userServiceUrl = sh(script: "kubectl get svc user-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo 'user-service'", returnStdout: true).trim()
                        def productServiceUrl = sh(script: "kubectl get svc product-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo 'product-service'", returnStdout: true).trim()
                        
                        // Run Nuclei scans
                        sh "nuclei -target http://${userServiceUrl}:5555 -templates /nuclei-templates/http/ -o user-service-nuclei.json -j"
                        sh "nuclei -target http://${productServiceUrl}:5556 -templates /nuclei-templates/http/ -o product-service-nuclei.json -j"
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh "kubectl get pods"
                sh "kubectl get services"
            }
        }
    }
    
    post {
        always {
            junit '**/test-results/*.xml'
            archiveArtifacts artifacts: '*-trivy.json,*-nuclei.json', allowEmptyArchive: true
            
            // Send metrics to Prometheus (using Prometheus Pushgateway)
            script {
                try {
                    def buildStatus = currentBuild.result ?: 'SUCCESS'
                    def buildDuration = currentBuild.duration
                    
                    // Example of sending metrics to Prometheus Pushgateway
                    sh """
                        echo "# TYPE build_status gauge
                        # HELP build_status Build status (1 for success, 0 for failure)
                        build_status{job=\"${JOB_NAME}\", build_number=\"${BUILD_NUMBER}\"} ${buildStatus == 'SUCCESS' ? 1 : 0}
                        # TYPE build_duration_seconds gauge
                        # HELP build_duration_seconds Build duration in seconds
                        build_duration_seconds{job=\"${JOB_NAME}\", build_number=\"${BUILD_NUMBER}\"} ${buildDuration / 1000}" | curl --data-binary @- http://prometheus:9091/metrics/job/jenkins/instance/${JOB_NAME}
                    """
                } catch (Exception e) {
                    echo "Failed to send metrics to Prometheus: ${e.message}"
                }
            }
        }
    }
}
